<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Simple IIS App</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: white;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.1);
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        h1 {
            text-align: center;
            margin-bottom: 30px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }
        .nav {
            text-align: center;
            margin-bottom: 30px;
        }
        .nav a {
            color: white;
            text-decoration: none;
            margin: 0 15px;
            padding: 10px 20px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 25px;
            transition: all 0.3s ease;
        }
        .nav a:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }
        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        .info-card {
            background: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        .info-card h3 {
            margin-top: 0;
            color: #FFE066;
        }
        .status {
            text-align: center;
            font-size: 1.2em;
            margin: 20px 0;
            padding: 15px;
            background: rgba(76, 175, 80, 0.3);
            border-radius: 10px;
            border: 1px solid rgba(76, 175, 80, 0.5);
        }
    </style>
</head>
<body>
    <div class="container">
        <nav class="nav">
            <a asp-controller="Home" asp-action="Index">üè† Home</a>
            <a asp-controller="Home" asp-action="About">üìã About</a>
            
            @if (User.Identity?.IsAuthenticated == true)
            {
                <a asp-controller="Home" asp-action="Dashboard">üéõÔ∏è Dashboard</a>
                <form asp-controller="Account" asp-action="Logout" method="post" style="display: inline; margin-left: 15px;">
                    <button type="submit" style="color: white; background: rgba(255, 99, 71, 0.8); border: none; padding: 10px 20px; border-radius: 25px; cursor: pointer; transition: all 0.3s ease;">
                        üö™ Logout
                    </button>
                </form>
            }
            else
            {
                <a asp-controller="Account" asp-action="Login">üîê Login</a>
            }
        </nav>
        
        <main role="main">
            @RenderBody()
        </main>
        
        <!-- Monitoring Status Indicator -->
        <div id="monitoring-status" style="position: fixed; top: 20px; right: 20px; background: rgba(0, 0, 0, 0.8); color: white; padding: 10px; border-radius: 10px; font-size: 0.9em; z-index: 1000;">
            üîÑ Monitoring: <span id="healthcheck-status">Starting...</span>
        </div>
    </div>

    <script>
        // Auto-healthcheck for monitoring tools like Datadog
        let healthcheckCount = 0;
        
        async function performHealthcheck() {
            try {
                const response = await fetch('/api/healthcheck');
                const data = await response.json();
                
                healthcheckCount++;
                document.getElementById('healthcheck-status').innerHTML = 
                    `‚úÖ Active (${healthcheckCount} checks)`;
                
                console.log('Healthcheck performed:', data);
                
                // Also update page title to show activity
                if (healthcheckCount % 10 === 0) {
                    document.title = `${document.title.split(' ')[0]} ${document.title.split(' ').slice(1).join(' ')} - ${healthcheckCount} checks`;
                }
                
            } catch (error) {
                console.error('Healthcheck failed:', error);
                document.getElementById('healthcheck-status').innerHTML = '‚ùå Failed';
            }
        }
        
        // Start healthcheck immediately and then every 30 seconds
        performHealthcheck();
        setInterval(performHealthcheck, 30000);
        
        // Show startup message
        console.log('üöÄ SimpleIIS App monitoring started - healthcheck every 30 seconds');
        console.log('üìä Monitor endpoints: /health, /api/healthcheck, /api/metrics');
        
        // Optional: Add metrics collection every 2 minutes
        setInterval(async () => {
            try {
                const response = await fetch('/api/metrics');
                const metrics = await response.json();
                console.log('üìä Metrics collected:', metrics);
            } catch (error) {
                console.error('Metrics collection failed:', error);
            }
        }, 120000); // 2 minutes
    </script>
</body>
</html>
